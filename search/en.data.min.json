[{"id":0,"href":"/about/","title":"About ssham","parent":"","content":""},{"id":1,"href":"/using-ssham/configuration/ssh-settings/","title":"SSH settings","parent":"Configuration","content":"Under this section you can configure how the bastion host will communicate with the rest of remote servers.\nBastion host credentials Private key SSHAM will use this key in order to connect to the remote hosts.\nPublic key Remote hosts will identify SSHAM with this key. This key should be distributed to the remote hosts to allow access without password.\nThe key distribution could be done using several approaches: ansible, puppet\u0026hellip;\nSSH options Timeout Time (seconds) to wait before a SSH connection is timed out.\n"},{"id":2,"href":"/installation/","title":"Installation","parent":"","content":""},{"id":3,"href":"/about/overview/","title":"Overview","parent":"About ssham","content":"Secure Shell, or Secure Socket Shell — commonly abbreviated as SSH — is a secure network protocol that allows users to securely authenticate to remote devices. SSH keys are used to access the SSH protocol. SSH leverages a pair of SSH keys to encrypt communication with a remote system. The key pair is cryptographic in nature and made up of a public and private key. The keys work in tandem to provide authentication between the client and the remote system.\nSSH keys grant users access to critical systems such as cloud and on-premise servers. Typically, these are systems that should only be accessed by authorized users, and no one else. A couple of methods exist for accessing the SSH protocol – passwords and SSH keys. It is not recommended to use passwords because their level of security is relatively low. SSH keys on the other hand can be a very secure method because they are made up of very long strings of composite numbers and prime factors. This is more challenging to crack than passwords, and is why SSH keys are favored over passwords for authenticating to the SSH protocol.\nBefore we proceed further, let us draw a distinction between public and private keys.\nPrivate and Public SSH Keys As the name suggests, the private key is only meant for the person who created it, and therefore strictly resides on the client system. It allows users to securely authenticate with the remote server, and should always be kept secret and never disclosed to anyone. In the wrong hands, the private key could be compromised and malicious users can use it to breach your systems. We cannot emphasize this enough: the private key should never be revealed to anyone else.\nOn the other hand, the public key can be freely shared with any server you wish to connect to without compromising your identity. It is used for encrypting data exchanged between the server and the client. The private key decrypts the messages sent from the remote server and a connection is established. On the remote system, the public key is saved in the authorized_keys file.\n"},{"id":4,"href":"/using-ssham/configuration/app-defaults/","title":"Application defaults","parent":"Configuration","content":" Remote paths Updater script remote path Path on remote hosts where the ssham-remote-updater.sh will be copied.\nauthorized_keys remote path Path of the authorized_keys file which contains the SSH keys that can be used for logging into the remote hosts.\nSSH remote port Default port to reach remote hosts by SSH protocol.\n"},{"id":5,"href":"/using-ssham/configuration/","title":"Configuration","parent":"Using ssham","content":" SSH settings Application defaults Hybrid configuration "},{"id":6,"href":"/about/ssh-authentication/","title":"SSH Authentication","parent":"About ssham","content":"SSH authentication is broadly categorized into two types: password-based and public key authentication.\n1. Password-based authentication In password-based authentication, the client sends an authentication request to the server which includes the encrypted username and password for the remote server. Upon receipt, the server decrypts the request and validates the credentials in plain text. Once verified, the client is notified of the authentication outcome.\n2. Public key authentication Public key authentication — also known as asymmetric encryption — uses a cryptographic key pair which comprises a private and public key on the client system. After generating the SSH key pair, both the public and private keys are saved on the client. The client then copies the public key to the remote server. So, how does the authentication really work?\nDuring authentication, the client system sends an authentication request to the remote server which includes a public key. The remote server then receives the request and checks if the public key matches the one copied to it. If the key is valid and matches the one on the server, the server then creates a secret message and encrypts it with the public key from the client. The message is then sent back to the client whereupon the private key decrypts the message. Because this is asymmetric encryption, only the client system can decrypt the message with the private key. Once the message is decrypted, the server acknowledges it and the authentication is successful.\nPublic key authentication is the more preferred authentication of the two. It is more convenient and secure than password-based authentication — and for good reasons. SSH keys are complex and difficult to crack thanks to the strong encryption algorithms used. In addition, only the user with the private key can access the remote system.\nWhen public key authentication is enabled, password authentication should be turned off so that only the private key alone can be used to authenticate with the remote system.\n"},{"id":7,"href":"/using-ssham/","title":"Using ssham","parent":"","content":""},{"id":8,"href":"/using-ssham/auth/","title":"Authorization","parent":"Using ssham","content":"There are 4 roles that you can assign to users. Each role provides different capabilities to manage ssham\u0026rsquo;s assets.\nPrinciple of least privilege\nEvery privileged user of the system should operate using the least amount of privilege necessary to complete the job. Role Keys and group of keys Hosts and group of hosts Rules Users Super Admin Edit Edit Edit Edit Admin Edit Edit Edit View Operator Edit Edit View View Auditor View View View View Capabilities Edit includes viewing, creating, modifying and deleting asset capabilities. View only includes viewing assets capability. API authentication In order to use the ssham API you need to create a Personal access token.\nTo create a new token go to: User management \u0026gt; Edit \u0026gt; Personal access tokens.\nAPI authorization\nThe token will have the same capabilities than the user who is owning the token. Default credentials Some users are created by default:\nRole Username Password It can modify\u0026hellip; Super Admin superadmin superadmin Everything Admin admin admin Everything, except Users and Settings Operator operator operator Keys and Hosts Auditor auditor auditor Nothing, READ-ONLY role "},{"id":9,"href":"/using-ssham/configuration/hybrid-configuration/","title":"Hybrid configuration","parent":"Configuration","content":" Hybrid mode If hybrid mode is enabled, the remote hosts will accept other access keys non-managed by SSHAM.\nFile to keep the managed keys File on remote hosts where SSHAM will generate the managed access keys.\nFile containing keys non-managed by SSHAM File on remote hosts where you maintain access keys non-managed by SSHAM.\n"},{"id":10,"href":"/installation/laravel-sail/","title":"Laravel Sail","parent":"Installation","content":"Laravel Sail is a light-weight command-line interface for interacting with Laravel\u0026rsquo;s default Docker development environment. This will create several containers to implement all SSHAM needs. An application server and a database server.\nPrior to this installation, you need to have installed this software:\nDocker Clone the repository locally\ngit clone https://github.com/pacoorozco/ssham.git ssham cd ssham Copy .env.example to .env.\nNOTE: You don\u0026rsquo;t need to touch anything from this file. It works with default settings.\nInstall PHP dependencies with:\nNOTE: You don\u0026rsquo;t need to install neither PHP nor Composer, we are going to use a Composer image instead.\ndocker run --rm \\ -u \u0026#34;$(id -u):$(id -g)\u0026#34; \\ -v $(pwd):/var/www/html \\ -w /var/www/html \\ laravelsail/php82-composer:latest \\ composer install --ignore-platform-reqs Start all containers with the sail command.\n./vendor/bin/sail up -d Seed database in order to play with some data\n# Running Artisan commands within Laravel Sail... sail artisan key:generate sail artisan migrate:fresh --seed Point your browser to http://localhost and test SSH Access Manager. Enjoy!\nNOTE: Default credentials are here.\n"},{"id":11,"href":"/about/why-ssham/","title":"Why ssham?","parent":"About ssham","content":"Proper management over any type of resource and its access credentials enables a secure, well controlled environment. You can ensure proper protection of keys with SSH key management — a combination of practices, policies, and tools for establishing secure SSH key usage routines within an organization. SSH key management can significantly enhance organization cybersecurity by protecting networks and systems from both external and insider attacks. It can also help an organization comply with cybersecurity standards, laws, and regulations.\nAt its core, SSH key management will help you:\nAccount for all generated SSH keys Ensure that no extra keys are generated except for valid reasons Know who accesses keys and when Avoid reusing keys across systems and users Immediately change or revoke access to keys Without centralized control, you can’t know how many SSH key pairs are in your organization’s network, who uses them, and how. And if you mismanage your SSH keys, it will create severe cybersecurity risks.\nSSH Access Manager - ssham - is a comprehensive access security management platform that permits IT professionals to easily establish and maintain an enterprise-wide SSH access security solution from a central location.\nIt enables a team of system administrators to centrally manage and deploy SSH keys. This app is intended to be used in rather large environment where access to unix accounts are handled with SSH keys.\n1. Find and inventory all SSH keys You can’t protect those SSH keys whose existence you don’t know about. So the first step in managing SSH keys is finding all existing keys and associating them with users and servers.\nYou can discover all existing keys within your IT infrastructure and learn what servers, machines, or systems they have access to. Thus, you can find potential vulnerabilities like duplicate or orphaned keys and fix them, as well as identify who’s using what keys to access which systems.\n2. Implement the principle of least privilege Privileged users should always have access rights only to the data and systems they need for work purposes.\nTo make this happen, configure individual SHH keys for these employees that allow them to access only the systems or machines they need to perform their duties. Also, make sure to review access rights when employees shift to another position. Avoid shared accounts because they make it impossible to identify who used a pair of keys.\n3. Eliminate hard-coded and old SSH keys As we mentioned earlier, SSH keys can be embedded in code or scripts, which can create dangerous backdoors for malware and hackers to exploit. Make sure to check your code for embedded SSH keys, bring them under centralized management, and remove them from applications.\nOld keys include orphaned and forgotten unaudited keys that can be exploited by cybercriminals. To avoid their appearance, it’s essential to:\nTerminate access to remote servers for any accounts associated with employees that leave an organization Keep track of all generated SSH keys Reduce the number of duplicate keys 4. Set clear rules for SSH key use and management Implement an SSH key management policy or make sure your current security policy has all the rules for proper SSH key management. Policies and procedures must establish consistent baseline requirements across all environments where SSH keys are used. These policies should clearly spell out roles and responsibilities to prevent security lapses.\nKey questions to cover with SSH security policies and procedures:\nWho can create keys and for what purposes? - ssham could help to assing roles and groups to define who can create keys and for what purposes. What is the procedure of requesting a pair of keys for an employee? - ssham becomes the tool for creating and distributing keys. How many users can be associated with a single key?- given that ssham makes key creation a really easy task, key sharing is not needed anymore. What should happen to keys when the user associated with them leaves the organization or switches to another position? - ssham will easily revoke these keys. "},{"id":12,"href":"/how-to/prepare-hosts/","title":"prepare your hosts","parent":"How to","content":"ssham runs on top of a bastion host. A bastion host is a server that has SSH access to all the managed hosts.\nIn order to grant access to the bastion host, you need a SSH keypair.\nThe private key of the SSH keypair will be used by the bastion host to connect to the managed hosts. This key should be kept veru careful because it provides access to all the managed hosts.\nThe public key, instead, will be used by the remote hosts to authenticate the bastion host. This key should be deployed in the authorized_keys file in each remote host that will be managed using ssham.\nIn order to deploy this keys you can use tools like puppet, ansible\u0026hellip;\nOnce you have deployed the bastion\u0026rsquo;s public key in all the servers, they can be managed by ssham.\n"},{"id":13,"href":"/about/how-it-works/","title":"How it works","parent":"About ssham","content":"SSHAM runs on top of a bastion host. A bastion host is a server that has SSH access to other servers.\nThe bastion host uses a SSH keypair to connect to the remote hosts. Every time that the bastion host wants to connect a remote server, it will use the private key. The remote server will authenticate the bastion host using the public key which was added the the remote\u0026rsquo;s authorized_keys file.\nYou must deploy the bastion\u0026rsquo;s public key in each server that you want to manage with ssham. You can use puppet, ansible\u0026hellip; to automate this step.\nOnce the bastion host has access to all the servers, you can use ssham to provide access to other users through their public keys.\nssham allows you to create and import SSH keys. These SSH keys could be grouped in keys groups.\nThe managed hosts could be grouped in hosts groups.\nAnd finally you can provide (or deny) access to a group of servers using a groups of keys, this is a rule.\nOnce you have defined your rules, you need to sync all the servers by configuring the authorized_keys file on the remote servers with the group of keys that has access granted. You can do it easily with the ssham provided command:\nphp artisan ssham:send\nThis command will connect to the remote host and update the content of the authorized_keys file, which has all the SSH public keys allowed to login.\n"},{"id":14,"href":"/how-to/","title":"How to","parent":"","content":""},{"id":15,"href":"/installation/manual/","title":"Manual","parent":"Installation","content":" Manual installation Clone the repository locally\ngit clone https://github.com/pacoorozco/ssham.git ssham cd ssham Install PHP dependencies with composer\ncurl -s https://getcomposer.org/installer | php php composer.phar install Copy .env.example to .env.\nModify the content of the .env file to put your settings, something like that:\nDB_HOST=\u0026#39;Your database host\u0026#39; DB_DATABASE=\u0026#39;Your database name\u0026#39; DB_USERNAME=\u0026#39;Your database user\u0026#39; DB_PASSWORD=\u0026#39;Your database password\u0026#39; Seed database in order to play with some data\nphp artisan key:generate php artisan migrate:fresh --seed Make sure storage/ and bootstrap/cache/ folders are writable by your web server. You can do it this way:\nchmod -R 777 storage/ bootstrap/cache/ You can use the local PHP server to run the application.\nphp artisan serve --port=4000` Your SSH Access Manager is not listening at http://localhost:4000. Enjoy!\nNOTE: Default credentials are admin/secret.\n"},{"id":16,"href":"/","title":"","parent":"","content":" Secure Shell Access Manager Secure and tightly automate the distribution and management of SSH keys.\nGetting Started Secure DevOps engineers and admins can upload, rotate, and delete SSH keys on their own, securely, without IT involvement.\nOne Identity Centralize your DevOps and engineering identities. It allows them to access to your servers using the same username but different SSH keys which allow audit.\nAutomation Streamline the distribution and removal of SSH keys from cloud and on-prem servers through automated group management.\n"},{"id":17,"href":"/categories/","title":"Categories","parent":"","content":""},{"id":18,"href":"/tags/","title":"Tags","parent":"","content":""}]