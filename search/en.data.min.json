[{"id":0,"href":"/guide/introduction/","title":"Introduction","parent":"Guide","content":"SSH Access Manager is a comprehensive access security management platform that permits IT professionals to easily establish and maintain an enterprise-wide SSH access security solution from a central location.\nIt enables a team of system administrators to centrally manage and deploy SSH keys. This app is intended to be used in rather large environment where access to unix accounts are handled with SSH keys.\nSSH Access Manager allows you to maintain user public keys. You can organise these keys with group of keys called keyring. Then SSH Access Manager will deploy the keys and/or key rings to specified unix accounts / groups / servers.\n"},{"id":1,"href":"/guide/getting-started/","title":"Getting started","parent":"Guide","content":"Quick start     This will create several Docker containers to implement all SSHAM needs. A web server and a database server.\nPrior to this installation, you need to have installed this software:\n Docker    Clone the repository locally\ngit clone https://github.com/pacoorozco/ssham.git ssham cd ssham   Install PHP dependencies with:\n NOTE: You don\u0026rsquo;t need to install neither PHP nor Composer, we are going to use a Composer image instead.\n docker run --rm --interactive --tty \\  --volume $PWD:/app \\  --user $(id -u):$(id -g) \\  composer install   Copy .env.example to .env.\n NOTE: You don\u0026rsquo;t need to touch anything from this file. It works with default settings.\n   Start all containers with Docker Compose\ndocker-compose build docker-compose up -d   Seed database in order to play with some data\ndocker-compose exec app php artisan key:generate docker-compose exec app php artisan migrate --seed   Point your browser to http://localhost and test SSH Access Manager. Enjoy!\n NOTE: Default credentials are admin/secret.\n   Manual installation       Clone the repository locally\ngit clone https://github.com/pacoorozco/ssham.git ssham cd ssham   Install PHP dependencies with composer\ncurl -s https://getcomposer.org/installer | php php composer.phar install   Copy .env.example to .env.\n  Modify the content of the .env file to put your settings, something like that:\nDB_HOST=\u0026#39;Your database host\u0026#39; DB_DATABASE=\u0026#39;Your database name\u0026#39; DB_USERNAME=\u0026#39;Your database user\u0026#39; DB_PASSWORD=\u0026#39;Your database password\u0026#39;   Seed database in order to play with some data\nphp artisan key:generate php artisan migrate --seed   Make sure storage/ and bootstrap/cache/ folders are writable by your web server. You can do it this way:\nchmod -R 777 storage/ bootstrap/cache/   You can use the local PHP server to run the application.\nphp artisan serve --port=4000`   Your SSH Access Manager is not listening at http://localhost:4000. Enjoy!\n NOTE: Default credentials are admin/secret.\n   "},{"id":2,"href":"/","title":"","parent":"","content":" Secure Shell Access Manager   Secure and tightly automate the distribution and management of SSH keys.\nGetting Started     Secure   DevOps engineers and admins can upload, rotate, and delete SSH keys on their own, securely, without IT involvement.  One Identity   Centralize your DevOps and engineering identities. It allows them to access to your servers using the same username but different SSH keys which allow audit.  Automation   Streamline the distribution and removal of SSH keys from cloud and on-prem servers through automated group management.   "},{"id":3,"href":"/guide/configuration/","title":"Configuration","parent":"Guide","content":"Configure\n"},{"id":4,"href":"/guide/","title":"Guide","parent":"","content":""},{"id":5,"href":"/categories/","title":"Categories","parent":"","content":""},{"id":6,"href":"/tags/","title":"Tags","parent":"","content":""}]